@page "/myprofile"
@using System.Text.Json
@using System.Net
@using System.Text
@using WgDashboard.Website.Helpers
@inherits BasePageFunctionality
@attribute [Authorize(Roles = "admin,user")]

@if(!ok)
{
    <p class="text-danger">@notOkReason</p>
}
@if(user is null)
{
    <p>Loading...</p>
}
else
{
    
    <div class="row">
        <div class="col-md-4">
            <h3>My Profile</h3>
            <p>User ID: @user.Id</p>
            <p>Name: @(user.Name is not null ? user.Name : "(none)")</p>
            <p>Username: @user.Username</p>
        </div>
    </div>
    <br />
    <div class="row">
        <h3>Change Password</h3>
    </div>
    <div class="row">
        <div class="col-md-4">
            <form>
                <div class="form-group">
                    <label for="change-password-textbox">Password:</label>
                    <input type="password" id="change-password-textbox" class="form-control" @bind=passwordRequest.Password />
                </div>
                <br />
                <div class="form-group">
                    <label for="change-password-confirm-textbox">Confirm Password:</label>
                    <input type="password" id="change-password-confirm-textbox" class="form-control" @bind=passwordRequest.ConfirmPassword />
                </div>
                <br />
                <div class="form-group">
                    <input type="submit" class="btn btn-primary" @onclick=SubmitPasswordChange @onclick:preventDefault="true" value="Submit" />
                </div>
            </form>
        </div>
    </div>
}

@code {
    private class PasswordRequest : ChangePasswordRequest
    {
        public string? ConfirmPassword { get; set; }
    }

    UserProfile? user = null;
    PasswordRequest passwordRequest = new PasswordRequest() { Id = AuthState.Id };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetUserProfile();
    }

    private async Task GetUserProfile() 
    {
        string uri = WebsiteConfig.GetSection("WireguardApiConfig").GetValue<string>("UserRoute") ?? "/api/users";
        uri += "/" + AuthState.Id;

        HttpResponseMessage response = await client.GetAsync(uri);
        if(response.IsSuccessStatusCode)
        {
            user = await response.Content.ReadFromJsonAsync<UserProfile>(
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true }
            );
            await base.ClearErrorMessage();
        }
        else if(response.StatusCode == HttpStatusCode.Unauthorized)
            await base.LogoutUser();
        else if (response.StatusCode == HttpStatusCode.NotFound)
                await base.SetErrorMessage($"Could not find user with ID {AuthState.Id}. Who are you?");
        else
            await base.SetErrorMessage((await response.Content.ReadAsStringAsync()).Replace("\"", ""));
    }

    private async Task SubmitPasswordChange()
    {
        if (StringsNullOrEmpty.Any(passwordRequest.Password, passwordRequest.ConfirmPassword))
        {
            await base.SetErrorMessage("Textbox cannot be empty");
            return;
        }
        else if(passwordRequest.Password != passwordRequest.ConfirmPassword)
        {
            await base.SetErrorMessage("Passwords do not match");
            return;
        }

        string? authRoute = WebsiteConfig.GetSection("WireguardApiConfig").GetValue<string>("AuthRoute");
        if (authRoute is not null)
            authRoute += "/passwd/";
        else
            authRoute = "/api/auth/passwd/";
        authRoute += AuthState.Id.ToString();

        var json = JsonSerializer.Serialize(new ChangePasswordRequest()
            {
                Id = passwordRequest.Id,
                Password = passwordRequest.Password,
            });
        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");
        HttpResponseMessage response = await client.PatchAsync(authRoute, content);

        if(response.IsSuccessStatusCode)
        {
            await base.JSRuntime.InvokeVoidAsync("alert", "Success! Page will now reload.");
            NavigationManager.NavigateTo("/", true);
        }
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            await LocalStorage.RemoveItemAsync("WireguardApiToken");
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/login");
        }
        else
            await base.SetErrorMessage((await response.Content.ReadAsStringAsync()).Replace("\"", ""));

    }
}
