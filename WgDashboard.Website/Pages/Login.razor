@page "/login"
@using System.Text.Json
@using System.Text
@using WgDashboard.Website.Helpers
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject IConfiguration WebsiteConfig
@inject HttpClient client
@inject IJSRuntime JSRuntime

<h3>Login</h3>
<hr />
@if(loginFailed)
{
    <div class="row">
        <div class="col-md-4">
            <p class="text-danger">@loginFailedReason</p>
            <br />
        </div>
    </div>
}
<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <label for="login-username" class="control-label">Username:</label>
                <input type="text" id="login-username" class="form-control" @bind=credentials.Username />
            </div>
            <br />
            <div class="form-group">
                <label for="login-password" class="control-label">Password:</label>
                <input type="password" id="login-password" class="form-control" @bind=credentials.Password />
            </div>
            <br />
            <div class="form-group">
                <input type="submit" class="btn btn-primary" @onclick=SubmitLogin @onclick:preventDefault="true" value="Submit" />
            </div>
        </form>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" value="" id="login-persist-checkbox" @onchange="() => loginPersist = !loginPersist"/>
            <label class="form-check-label" for="login-persist-checkbox">Remember me for 7 days</label>
        </div>
        <br />
    </div>
</div>

@code {

    private LoginRequest credentials = new LoginRequest();
    private bool loginFailed = false;
    private string loginFailedReason = "";
    private bool loginPersist = false;

    private class FetchResult
    {
        public int StatusCode { get; set; }
        public string ResponseBody { get; set; } = "";
        public bool IsSuccessStatusCode { get => 200 <= StatusCode && StatusCode <= 299; }
    }

    private async void SubmitLogin()
    {
        string BASE_URL = WebsiteConfig.GetSection("WireguardApiConfig").GetValue<string>("BaseUrl") ?? "http://localhost:3000";
        const string BASE_AUTH_ROUTE = "/api/auth";
        string? jwt = "";
        loginFailed = false;

        // guard against bad input
        if(StringsNullOrEmpty.Any(credentials.Username, credentials.Password))
        {
            loginFailed = true;
            loginFailedReason = "Textbox cannot be empty";
            await InvokeAsync(StateHasChanged);
            return;
        }

        string loginRoute = BASE_URL + BASE_AUTH_ROUTE + "/login";

        FetchResult fetchResult = await JSRuntime.InvokeAsync<FetchResult>("window.loginApi", loginRoute, credentials.Username, credentials.Password);
        if(fetchResult.IsSuccessStatusCode)
        {
            jwt = fetchResult.ResponseBody.Replace("\"", "");
            await LocalStorage.SetItemAsync("WireguardApiToken", jwt);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        else
        {
            loginFailed = true;
            loginFailedReason = fetchResult.ResponseBody.Replace("\"", "");
            await InvokeAsync(StateHasChanged);
        }

    }
}
