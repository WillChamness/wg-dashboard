@page "/profile"
@using System.Text.Json
@using System.Net
@using System.Text
@using WgDashboard.Website.Helpers
@attribute [Authorize(Roles = "admin,user")]
@inject IJSRuntime JsRuntime

@if(users is null)
{
    <p>Loading...</p>
}
else
{
    @if (!ok)
    {
        <div class="row">
            <div class="col-md-4">
                <p class="text-danger">@notOkReason</p>
            </div>
        </div>
    }
    if(AuthState.Role == UserRoles.Admin)
    {
        <h3>User Profiles</h3>
        <div class="row" style="overflow-x: scroll; max-height: 350px; overflow-y: scroll;">
            <div class="col-md-12">
                <table class="table">
                    <thead>
                        <tr>
                            <th>User ID</th>
                            <th>Name</th>
                            <th>Username</th>
                            <th>Role</th>
                            <th>Make Admin</th>
                            <th>Delete User</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if(true) @* use meaningless conditional to declare variable *@
                        {
                            int i = 0; // using for loop causes overflow exception when searching for users
                            @foreach (UserProfile user in users)
                            {
                                if(user.Id != AuthState.Id)
                                {
                                    int buffer = i;
                                    string backgroundColor = buffer % 2 == 0 ? "table-light" : "table-secondary";
                                    <tr class=@backgroundColor>
                                        <td>@user.Id</td>
                                        <td>@user.Name</td>
                                        <td>@user.Username</td>
                                        <td>@user.Role</td>
                                        <td><input type="button" class="btn btn-warning" value="Make Admin" @onclick="() => MakeAdmin(buffer)"/></td>
                                        <td><input type="button" class="btn btn-danger" value="Delete" @onclick="() => DeleteUser(buffer)" /></td>
                                    </tr>
                                }
                                i++;
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    <br />
    @if(true) @* use meaningless conditional to declare variable *@
    {
        UserProfile? userProfile = users.Where((user) => user.Id == AuthState.Id).FirstOrDefault();
        if(userProfile is null)
        {
            <p class="text-danger">Could not identify user with ID @AuthState.Id. Who are you?</p>
        }
        else
        {
            <div class="row">
                <div class="col-md-4">
                    <h3>My Profile</h3>
                    <p>User ID: @userProfile.Id</p>
                    <p>Name: @(userProfile.Name is not null ? userProfile.Name : "(none)")</p>
                    <p>Username: @userProfile.Username</p>
                </div>
            </div>
            <br />
            <div class="row">
                <h3>Change Password</h3>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <form>
                        <div class="form-group">
                            <label for="change-password-textbox">Password:</label>
                            <input type="password" id="change-password-textbox" class="form-control" @bind=passwordRequest.Password />
                        </div>
                        <br />
                        <div class="form-group">
                            <label for="change-password-confirm-textbox">Confirm Password:</label>
                            <input type="password" id="change-password-confirm-textbox" class="form-control" @bind=passwordRequest.ConfirmPassword />
                        </div>
                        <br />
                        <div class="form-group">
                            <input type="submit" class="btn btn-primary" @onclick=SubmitPasswordChange @onclick:preventDefault="true" value="Submit" />
                        </div>
                    </form>
                </div>
            </div>
        }
    }
}
@code {
    private class PasswordRequest : ChangePasswordRequest
    {
        public string? ConfirmPassword { get; set; }
    }
    List<UserProfile>? users;
    PasswordRequest passwordRequest = new PasswordRequest() { Id = AuthState.Id };
    bool ok = true;
    string notOkReason = "";

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.Role == UserRoles.Admin)
            await GetAllUsers();
        else
            await GetUserProfile();
    }

    private async Task GetAllUsers()
    {
        string uri = WebsiteConfig.GetSection("WireguardApiConfig").GetValue<string>("UserRoute") ?? "/api/users";

        HttpResponseMessage response = await client.GetAsync(uri);
        if(response.IsSuccessStatusCode)
        {
            List<UserProfile>? userProfiles = await response.Content.ReadFromJsonAsync<List<UserProfile>>(
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true }
            );

            users = new List<UserProfile>();
            if (userProfiles is not null)
                users = userProfiles;
        }
        else if(response.StatusCode == HttpStatusCode.Unauthorized)
        {
            await LocalStorage.RemoveItemAsync("WireguardApiToken");
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            ok = false;
            notOkReason = (await response.Content.ReadAsStringAsync()).Replace("\"", "");
            await InvokeAsync(StateHasChanged);
            await ScrollToTop();
        }
    }

    private async Task GetUserProfile() 
    {
        string uri = WebsiteConfig.GetSection("WireguardApiConfig").GetValue<string>("UserRoute") ?? "/api/users";
        uri += "/" + AuthState.Id;

        HttpResponseMessage response = await client.GetAsync(uri);
        if(response.IsSuccessStatusCode)
        {
            UserProfile? user = await response.Content.ReadFromJsonAsync<UserProfile>(
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true }
            );

            users = new List<UserProfile>();
            if (user is not null)
                users.Add(user);
        }
        else if(response.StatusCode == HttpStatusCode.Unauthorized)
        {
            await LocalStorage.RemoveItemAsync("WireguardApiToken");
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            ok = false;
            notOkReason = (await response.Content.ReadAsStringAsync()).Replace("\"", "");
            await InvokeAsync(StateHasChanged);
            await ScrollToTop();
        }
    }

    private async Task DeleteUser(int userIndex)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? This will delete the user and all peers attached forever.");
        if (!confirmed)
            return;
        UserProfile user = users![userIndex]; // users validated not null by OnInitializedAsync() at this point
        string uri = WebsiteConfig.GetSection("WireguardApiConfig").GetValue<string>("UserRoute") ?? "/api/users";
        uri += "/" + user.Id;

        HttpResponseMessage response = await client.DeleteAsync(uri);
        if(response.IsSuccessStatusCode)
        {
            await GetAllUsers();
            ok = true;
        }
        else if(response.StatusCode == HttpStatusCode.Unauthorized)
        {
            await LocalStorage.RemoveItemAsync("WireguardApiToken");
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            ok = false;
            notOkReason = (await response.Content.ReadAsStringAsync()).Replace("\"", "");
            await InvokeAsync(StateHasChanged);
            await ScrollToTop();
        }
    }

    private async Task SubmitPasswordChange()
    {
        if (StringsNullOrEmpty.Any(passwordRequest.Password, passwordRequest.ConfirmPassword))
        {
            ok = false;
            notOkReason = "Textbox cannot be empty";
            await InvokeAsync(StateHasChanged);
            await ScrollToTop();
            return;
        }
        else if(passwordRequest.Password != passwordRequest.ConfirmPassword)
        {
            ok = false;
            notOkReason = "Passwords do not match";
            await InvokeAsync(StateHasChanged);
            await ScrollToTop();
            return;
        }

        string? authRoute = WebsiteConfig.GetSection("WireguardApiConfig").GetValue<string>("AuthRoute");
        if (authRoute is not null)
            authRoute += "/passwd/";
        else
            authRoute = "/api/auth/passwd/";
        authRoute += AuthState.Id.ToString();

        var json = JsonSerializer.Serialize(new ChangePasswordRequest()
            {
                Id = passwordRequest.Id,
                Password = passwordRequest.Password,
            });
        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");
        HttpResponseMessage response = await client.PatchAsync(authRoute, content);

        if(response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Success! Page will now reload.");
            NavigationManager.NavigateTo("/", true);
        }
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            await LocalStorage.RemoveItemAsync("WireguardApiToken");
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            ok = false;
            notOkReason = (await response.Content.ReadAsStringAsync()).Replace("\"", "");
            await InvokeAsync(StateHasChanged);
            await ScrollToTop();
        }

    }

    private async Task ScrollToTop()
    {
        string id = "top";
        var js = "window.scrollToId";
        await JsRuntime.InvokeVoidAsync(js, id);
    }

    private async Task MakeAdmin(int userIndex)
    {
        string username = users![userIndex].Username; // users confirmed to be not null at this point
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Make '{username}' admin?");
        if (!confirmed)
            return;
        confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure? The only way to undo this is to delete '{username}'");
        if (!confirmed)
            return;

        var updatedUser = new UpdateUserRequest()
            {
                Id = users![userIndex].Id,
                Username = users![userIndex].Username,
                Name = users![userIndex].Name,
                Role = UserRoles.Admin,
            };

        string? userRoute = WebsiteConfig.GetSection("WireguardApiConfig").GetValue<string>("UserRoute");
        if (userRoute is not null)
            userRoute += "/" + updatedUser.Id;
        else
            userRoute = "/api/users/" + updatedUser.Id;

        string json = JsonSerializer.Serialize(updatedUser);
        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");
        HttpResponseMessage response = await client.PutAsync(userRoute, content);

        if(response.IsSuccessStatusCode)
        {
            users![userIndex].Role = "admin";
            await InvokeAsync(StateHasChanged);
        }
        else if(response.StatusCode == HttpStatusCode.Unauthorized)
        {
            await LocalStorage.RemoveItemAsync("WireguardApiToken");
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            ok = false;
            notOkReason = (await response.Content.ReadAsStringAsync()).Replace("\"", "");
            await InvokeAsync(StateHasChanged);
            await ScrollToTop();
        }
    }
}
